/graphql 을 활용해 해결가능한 두가지 문제/
1.over-fetching, 2.under-fetching

1./user/ GET (불필요한 정보들을 가져오게됨)

2. (예를들어 인스타에서)/feed/notification/user/(기본적으로 깔려있는 요청 때문에 비효율) 


graphql 이용

Query(datebase에서 내가 원하는 데이터를 요청하고 graphql언어로 내가 원하는 정보를 요구할 수 있다.)

query{
    feed{
        commets
        likeNumber
    }
    notification{
        isread
    }
    user{
        username    
        profilepic
    }

}

위와 같이 backend에 요구하면
아래와 같이 javascript로 만들어진 object를 받게 된다.

{
    feed[
        {
            commets:1,
            likeNumber:23
        }
    ]
    notification:[
        {
            isread : tue
        },
        {
            isread:false
        }
    ]
    user:[
        {
            username:"joon"
            profilepic:"https"
        }
    ]
}


이제 서버를 만들어 보자
yarn global add nodemon(main 파일을 주시해서 변화가 있으면 재시작한다.)
yarn global add babel-~~~

index.js에 console.log("jlsdjif")
실행하면 서버가 반응할 것이다 그러면 그것을 지우고
import { GraphQLServer } from "graphql-yoga"
const server = new GraphQLServer({

});
server.start(() =>console.log("Graphql server running"));

을 기록하고 yarn start를 누르면 no schema 라고 뜰것이다. 그렇다면 
schema에 대해 생각해보자.

schema는 사용자에게 보내거나 사용자에게 받은 data에 대한 설명
type Query {
    name:String!'
    age:Int!,
    gender:String!
}

database로 부터 정보를 얻을 때 사용하는 것 Query( 사용자에게 정보를 받는 것)
data를 변형할 때 사용하는 것 mutation
schema를 통해 어떤mutation과 Query를 가졌는지 설명하는 것??

첫 순서로 Query를 선언해야함
type Query{
    name : string!(사용자요구:답변)(참고로 String무조건  대문자)
}
사용자가 Query에 name을 보내면 문자로 받겠다는 설명

typeDefs을 통해 type들에 대한 정의

resolvers는 Query를 resolve 하는 것
(resolvers를 통해 원하는 대로 data를 관리할 수 있다.)
resolvers를 정하고 export default 한다. 그렇게하면 다른 파일에서 import 할 수 있게 된다. (default가 붙으면 하나로 한정됨.)

graphql에서 Couldn't find type string in any of the schemas이런거 뜨면 대문자 확인하기

이제 graphql의 playground를 통해 database를 테스트한다.( localhost:4000을 통해 접속한다. )
데이터를 보내는것 을 post라고 한다.

코딩 요약하기 같은 의미
person: function() {return joyongjun}
person:() => joyongjun 

resolvers.js에서 데이터를 서버로 보내는 역할을 한다.
많은 data는 따로 파일을 만들어서 기록하고 export해서 resolvers.js에 import하여 사용한다.

이제 더 복잡한 query를 만들어보자.

data를 people과 person으로 구분해서 한번에 모두 불러오거나 id(argument)를 통해 특정하나의 data를 불러올 수 있다.
filter라는 함수를 이용한다.

graphql서버에서 핵심 주제
schema, Query, resolvers, database